#! /usr/bin/env -S deno run --ext=ts --allow-read --allow-write --allow-env --allow-net --allow-run --allow-sys
// Copyright Deno Land Inc. All Rights Reserved. Proprietary and confidential.

import { parseArgs } from "jsr:@std/cli@1.0.3/parse-args";
import { join } from "jsr:@std/path@1.0.3/join";
import { ensureDir } from "jsr:@std/fs@1.0.3";
import { crypto } from "jsr:@std/crypto@1.0.3";
import { encodeBase64Url } from "jsr:@std/encoding@1.0.7";

interface DeployArgs {
  domain?: string;
  sourceDir?: string;
  entryPoint?: string;
  env?: Record<string, string>;
  s3Bucket?: string;
  azStorageAccount?: string;
  authKey?: string;
  authClaims?: string;
  skipOptimization?: boolean;
  otelServiceName?: string;
  otelServiceVersion?: string;
  otelResourceAttributes?: Record<string, string>;
}

interface UserConfig {
  code?: string;
  entrypoint?: string;
  env?: Record<string, string>;
  args?: string[];
  otel?: OtelConfig;
  cache?: Record<string, CacheConfig>;
}

interface OtelConfig {
  serviceName?: string;
  serviceVersion?: string;
  resourceAttributes?: Record<string, string>;
}

interface CacheConfig {
  private: Record<string, string>;
  shared?: Record<string, string>;
  tags: Record<string, string>;
}

type BucketPayload = string | { path: string };

// Return a function for writing content into the storage bucket.
function createWriter(args: Pick<DeployArgs, "s3Bucket" | "azStorageAccount">) {
  const s3Endpoint = Deno.env.get("S3_ENDPOINT");
  const backend = args.s3Bucket ? "aws" : args.azStorageAccount ? "az" : null;

  if (!backend) {
    throw new Error("No storage provider specified.");
  }

  // Write the provided file or string into the given path. Returns
  // the full URL of the created object on success or false.
  return async function write(
    path: string,
    payload: BucketPayload,
  ): Promise<string | false> {
    if (backend === "aws") {
      const fullPath = `s3://${args.s3Bucket}/${path}`;
      const cmdArgs = [
        "s3",
        "cp",
        typeof payload === "string" ? "-" : payload.path,
        fullPath,
      ];
      if (s3Endpoint !== undefined) {
        cmdArgs.push(`--endpoint=${s3Endpoint}`);
      }
      const writeCommand = new Deno.Command("aws", {
        args: cmdArgs,
        stdout: "inherit",
        stderr: "inherit",
        stdin: "piped",
      });

      const child = writeCommand.spawn();

      if (typeof payload === "string") {
        const writer = child.stdin.getWriter();
        await writer.write(new TextEncoder().encode(payload));
        writer.close();
      }

      if ((await child.output()).success) {
        return fullPath;
      }
    } else if (backend === "az") {
      const child = new Deno.Command("az", {
        args: [
          "storage",
          "blob",
          "upload",
          "-o",
          "none",
          "--only-show-errors",
          "--overwrite",
          ...typeof payload === "string"
            ? ["--data", payload]
            : ["-f", payload.path],
          "--account-name",
          args.azStorageAccount!,
          "-c",
          "deployments",
          "-n",
          path,
        ],
        stdout: "inherit",
        stderr: "inherit",
      });

      if ((await child.output()).success) {
        return `s3://deployments/${path}`;
      }
    }

    return false;
  };
}

async function createJwtToken(
  args: Pick<DeployArgs, "authKey" | "authClaims">,
): Promise<string | undefined> {
  if (!args.authKey) return;

  const keyContent = await Deno.readTextFile(args.authKey);
  const base64 = keyContent.replace(/(-{5}[^\\n]+-{5}|\s+)/g, "");
  const buf = Uint8Array.from(atob(base64), (ch) => ch.charCodeAt(0));

  let key;
  try {
    key = await crypto.subtle.importKey(
      "pkcs8",
      buf,
      { name: "ECDSA", namedCurve: "P-256" },
      false,
      ["sign"],
    );
  } catch (e) {
    console.error("Could not load JWT signing key from the pem file");
    console.error(e);
    Deno.exit(1);
  }

  let claimsOverride;
  try {
    claimsOverride = args.authClaims ? JSON.parse(args.authClaims) : {};
  } catch (e) {
    console.error("--auth-claims must be a valid json.");
    console.error(e);
    Deno.exit(1);
  }

  const CLUSTER_ENDPOINT = new URL(
    Deno.env.get("CLUSTER_ENDPOINT") || "http://localhost",
  );
  const aud = CLUSTER_ENDPOINT.hostname.match(/[a-z]/i)
    ? CLUSTER_ENDPOINT.hostname
    : "localhost";

  const header = encodeBase64Url(JSON.stringify({
    typ: "JWT",
    alg: "ES256",
  }));

  const claims = encodeBase64Url(JSON.stringify({
    iss: "local",
    aud,
    sub: "admin",
    exp: Math.trunc(Date.now() / 1000 + 300),
    scope: "appconfig",
    ...claimsOverride,
  }));

  const message = `${header}.${claims}`;
  const dataToSign = new TextEncoder().encode(message);
  const signature = encodeBase64Url(
    await crypto.subtle.sign(
      { name: "ECDSA", hash: "sha-256" },
      key,
      dataToSign,
    ),
  );

  return `${message}.${signature}`;
}

async function deploy(args: DeployArgs) {
  // Validate required parameters
  if (!args.domain) {
    console.error("Deployment domain is required.");
    usage();
    Deno.exit(1);
  }

  if (!args.s3Bucket && !args.azStorageAccount) {
    console.error(
      "Either --s3-bucket or --az-storage-account must be provided.",
    );
    usage();
    Deno.exit(1);
  }

  const writeToBucket = createWriter(args);
  const authToken = await createJwtToken(args);

  const sourceDir = args.sourceDir || Deno.cwd();
  let entryPoint = args.entryPoint;

  // Prepare temp directory
  const tempDir = await Deno.makeTempDir({ prefix: "deno-cluster" });

  try {
    await ensureDir(join(tempDir, "pkg", "deno_dir"));
    await ensureDir(join(tempDir, "pkg", "src"));

    // Copy source code to tempdir
    const copyCommand = new Deno.Command("bash", {
      args: [
        "-c",
        `(cd "${sourceDir}" && tar --exclude='.git' -cf - .) | (cd "${tempDir}/pkg/src" && tar -xf -)`,
      ],
      stdout: "inherit",
      stderr: "inherit",
    });
    const { success: copySuccess } = await copyCommand
      .output();
    if (!copySuccess) {
      console.error("Failed to copy source code.");
      Deno.exit(1);
    }

    // Detect entry point if not specified
    if (!entryPoint) {
      const possibleEntryPoints = [
        "main.ts",
        "main.js",
        "index.ts",
        "index.js",
        "mod.ts",
        "mod.js",
        "node_modules/.bin/next",
      ];
      for (const ep of possibleEntryPoints) {
        if (
          await Deno.stat(join(tempDir, "pkg", "src", ep)).catch(() => null)
        ) {
          entryPoint = ep;
          break;
        }
      }
    }

    if (!entryPoint) {
      console.error("Error: could not determine entry point.");
      Deno.exit(1);
    }

    const isNextApp = entryPoint === "node_modules/.bin/next";

    console.log(`  entry point: ${entryPoint}`);

    console.log("Building package...");

    // Cache dependencies
    const cacheCommand = new Deno.Command("deno", {
      env: { "DENO_DIR": join(tempDir, "pkg", "deno_dir") },
      args: [
        "install",
        "--allow-import",
        "--entrypoint",
        join(tempDir, "pkg", "src", entryPoint),
      ],
      stdout: "inherit",
      stderr: "inherit",
      cwd: join(tempDir, "pkg", "src"),
    });
    const { success: cacheSuccess } = await cacheCommand
      .output();
    if (!cacheSuccess) {
      console.error("Failed to cache dependencies.");
      Deno.exit(1);
    }

    // Create tar archive
    const tarCommand = new Deno.Command("tar", {
      args: [
        "cf",
        join(tempDir, "pkg.tar"),
        "--strip-components=1",
        "-C",
        join(tempDir, "pkg"),
        ".",
      ],
      stdout: "inherit",
      stderr: "inherit",
    });
    const { success: tarSuccess } = await tarCommand
      .output();
    if (!tarSuccess) {
      console.error("Failed to create tar archive.");
      Deno.exit(1);
    }

    // Upload package
    console.log("Uploading package...");
    const codePath = `code/pkg-${Date.now()}-${crypto.randomUUID()}.tar`;
    const codeUrl = await writeToBucket(codePath, {
      path: join(tempDir, "pkg.tar"),
    });
    if (!codeUrl) {
      console.error("Failed to upload package.");
      Deno.exit(1);
    }

    // Construct the config object.
    const cacheAttrs = { org: "placeholder", random: crypto.randomUUID() };
    const appconfigJson = JSON.stringify(
      <UserConfig> {
        code: "/" + codePath,
        entrypoint: entryPoint,
        args: isNextApp ? ["start"] : undefined,
        env: Object.keys(args.env || {}).length > 0 ? args.env : undefined,
        otel: (args.otelServiceName || args.otelServiceVersion ||
            args.otelResourceAttributes)
          ? {
            serviceName: args.otelServiceName,
            serviceVersion: args.otelServiceVersion,
            resourceAttributes: args.otelResourceAttributes,
          }
          : undefined,
        cache: {
          "*": {
            private: { ...cacheAttrs },
            tags: {},
          },
          "http": {
            private: {
              ...cacheAttrs,
              subspace: "http",
            },
            tags: {},
          },
        },
      },
    );

    // Make a HTTP request to the cluster to trigger deployment
    if (!(args.skipOptimization ?? false)) {
      console.log("Optimizing deployment...");
      const CLUSTER_ENDPOINT = Deno.env.get("CLUSTER_ENDPOINT");
      const headers: Record<string, string> = {
        "x-forwarded-host": args.domain,
        "x-deno-appconfig": appconfigJson,
      };

      if (authToken) {
        headers["x-deno-authorization"] = `Bearer ${authToken}`;
      }

      try {
        const response = await fetch(
          CLUSTER_ENDPOINT ?? `https://${args.domain}`,
          { headers },
        );

        // Proxy always sends back a `via` header before it starts proxying the
        // response from an isolate.
        //
        // Checking the request status is not reliable here if the user script
        // returns a non-200 response. In that case the optimization has still
        // been successful.
        if (!response.headers.has("via")) {
          throw new Error(
            `Failed to optimize deployment: ${response.status}`,
          );
        }
      } catch (e) {
        console.error("Failed to optimize deployment");
        throw e;
      }
    } else {
      console.log("Skipping optimization step...");
    }

    // Update domain mapping
    console.log(`Attaching ${args.domain}...`);
    if (
      !await writeToBucket(
        `domains/${args.domain}`,
        appconfigJson,
      )
    ) {
      console.error("Failed to attach domain.");
      Deno.exit(1);
    }

    // Refresh vectorized change notification
    const vcnKey = new BigUint64Array(
      await crypto.subtle.digest(
        "BLAKE3",
        new TextEncoder().encode(`domains/${args.domain}`),
      ),
      0,
      1,
    )[0] % 1000n;
    console.log(`VCN: ${vcnKey}`);

    if (
      !await writeToBucket(
        `appconfig_vcn/${vcnKey}`,
        crypto.randomUUID(),
      )
    ) {
      console.error("Failed to write VCN.");
      Deno.exit(1);
    }

    // Write global notification.
    if (
      !await writeToBucket(
        "appconfig_vcn/_",
        crypto.randomUUID(),
      )
    ) {
      console.error("Failed to write global notification.");
      Deno.exit(1);
    }

    console.log(`Deployed to https://${args.domain}`);
  } finally {
    // Clean up temp directory
    await Deno.remove(tempDir, { recursive: true });
  }
}

function usage() {
  console.log("Usage: cli.ts <command> [options]");
  console.log("Commands:");
  console.log("  deploy                         Create a new deployment");
  console.log();
  console.log("Options:");
  console.log(
    "  -d,--domain <domain>             Deployment domain (e.g., hello.mycluster.deno-cluster.net)",
  );
  console.log(
    "  -s,--source-dir <dir>            Source directory (default: current directory)",
  );
  console.log(
    "  -e,--entry-point <file>          Specify entry point (default: auto detect)",
  );
  console.log(
    "  -k,--key <file>                  The private key to use for the JWT authorization",
  );
  console.log(
    "  --env <KEY=VALUE>                Set environment variables using KEY=VALUE format, can be specified multiple times",
  );
  console.log(
    "  --otel-service-name <name>       Specify OpenTelemetry service name",
  );
  console.log(
    "  --otel-service-version <ver>     Specify OpenTelemetry service version",
  );
  console.log(
    "  --otel-resource-attribute <K=V>  Specify OpenTelemetry resource attributes in KEY=VALUE format, can be specified multiple times",
  );
  console.log(
    "  --s3-bucket <bucket>             Specify S3 bucket (required if using AWS)",
  );
  console.log(
    "  --az-storage-account <acc>       Azure storage account (required if using Azure)",
  );
  console.log(
    "  --auth-claims <json>             Overrides the default values for the authorization claims",
  );
  console.log(
    "  --skip-optimize                  Skip the optimization step",
  );
  Deno.exit(1);
}

if (import.meta.main) {
  if (+Deno.version.deno.replace(/\..*$/, "") < 2) {
    console.error("This program requires deno version 2.0.0 or higher");
    Deno.exit(1);
  }

  const args = parseArgs(Deno.args, {
    string: [
      "domain",
      "source-dir",
      "entry-point",
      "env",
      "s3-bucket",
      "az-storage-account",
      "otel-service-name",
      "otel-service-version",
      "otel-resource-attribute",
      "key",
      "auth-claims",
    ],
    collect: ["env", "otel-resource-attribute"],
    alias: {
      d: "domain",
      s: "source-dir",
      e: "entry-point",
      k: "key",
    },
    boolean: ["skip-optimize"],
  });

  if (args._[0] === "deploy") {
    await deploy({
      domain: args.domain,
      sourceDir: args["source-dir"],
      entryPoint: args["entry-point"],
      env: args.env.length > 0
        ? Object.fromEntries(args.env.map((e: string) => {
          const eqIndex = e.indexOf("=");
          if (eqIndex === -1) {
            console.error(`Invalid environment variable: ${e}`);
            Deno.exit(1);
          }
          return [e.slice(0, eqIndex), e.slice(eqIndex + 1)];
        }))
        : undefined,
      s3Bucket: args["s3-bucket"],
      azStorageAccount: args["az-storage-account"],
      authKey: args["key"],
      authClaims: args["auth-claims"],
      skipOptimization: args["skip-optimize"],
      otelServiceName: args["otel-service-name"],
      otelServiceVersion: args["otel-service-version"],
      otelResourceAttributes: args["otel-resource-attribute"].length > 0
        ? Object.fromEntries(
          args["otel-resource-attribute"].map((attr: string) => {
            const eqIndex = attr.indexOf("=");
            if (eqIndex === -1) {
              console.error(`Invalid resource attribute: ${attr}`);
              Deno.exit(1);
            }
            return [attr.slice(0, eqIndex), attr.slice(eqIndex + 1)];
          }),
        )
        : undefined,
    });
  } else if (args._[0] === "help" || args.help) {
    usage();
  } else {
    console.error("Unknown command");
    Deno.exit(1);
  }
}
