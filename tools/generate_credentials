#! /usr/bin/env -S deno run --ext=ts --allow-env
// Copyright Deno Land Inc. All Rights Reserved. Proprietary and confidential.

import { decodeHex, encodeHex } from "jsr:@std/encoding/hex";
import { encodeBase64 } from "jsr:@std/encoding/base64";
import elliptic from "npm:elliptic";
import * as yaml from "jsr:@std/yaml";
import * as x509 from "npm:@peculiar/x509";

const k8sSecretMetadata = JSON.parse(Deno.env.get("K8S_SECRET_METADATA") || "{}");
if (!k8sSecretMetadata || typeof k8sSecretMetadata !== "object" || Array.isArray(k8sSecretMetadata)) throw new Error("K8S_SECRET_METADATA must be a JSON object");

const hkdfSeed_ = Deno.env.get("HKDF_SEED");
if (!hkdfSeed_) throw new Error("HKDF_SEED must be set");
const hkdfSeed = await crypto.subtle.importKey("raw", new TextEncoder().encode(hkdfSeed_), "HKDF", false, ["deriveKey"]);

const curve25519 = new elliptic.ec("curve25519")
const p256 = new elliptic.ec("p256");

function x25519PrivToPub(privHex: string): string {
    // https://github.com/indutny/elliptic/issues/243#issuecomment-814470828
    const privBytes = decodeHex(privHex);
    privBytes[0] &= 248;
    privBytes[31] &= 127;
    privBytes[31] |= 64;
    privBytes.reverse();

    const key = curve25519.keyFromPrivate(privBytes);
    return encodeHex(Uint8Array.from(key.getPublic("raw")).reverse());
}

async function deriveKey(info: string): Promise<string> {
    const key = await crypto.subtle.deriveKey(
        {
            name: "HKDF",
            hash: "SHA-256",
            salt: new Uint8Array(32),
            info: new TextEncoder().encode(info),
        },
        hkdfSeed,
        { name: "AES-GCM", length: 256 },
        true,
        ["encrypt", "decrypt"]
    );
    return encodeHex(new Uint8Array(await crypto.subtle.exportKey("raw", key)));
}

function gen(name: string, entries: Record<string, string>): string {
    const doc = {
        apiVersion: "v1",
        kind: "Secret",
        metadata: {
            ...k8sSecretMetadata, name, labels: {
                ...k8sSecretMetadata.labels || {},
                "deno-auto-generated-credentials": "1",
            }
        },
        type: "Opaque",
        stringData: entries,
    };
    return "---\n" + yaml.stringify(doc);
}

function splitToLines(input: string, width: number): string[] {
    const lines = [];
    for (let i = 0; i < input.length; i += width) {
        lines.push(input.slice(i, i + width));
    }
    return lines;
}

let multiplexerTls: { cert: string, key: string };
{
    const tlsCertAlg: EcKeyImportParams = {
        name: "ECDSA",
        namedCurve: "P-256",
    };
    const tlsPrivateKeyHex = await deriveKey("proxy-multiplexer-tls-key");
    const tlsPublicKey = await crypto.subtle.importKey("raw", decodeHex(p256.keyFromPrivate(tlsPrivateKeyHex).getPublic("hex")), tlsCertAlg, true, ["verify"]);
    const tlsPublicKeyJwk = await crypto.subtle.exportKey("jwk", tlsPublicKey);
    const tlsKeypair = {
        privateKey: await crypto.subtle.importKey("jwk", {
            alg: "ES256",
            crv: "P-256",
            d: encodeBase64(decodeHex(tlsPrivateKeyHex)).replaceAll("=", "").replace(/\+/g, "-").replace(/\//g, "_"),
            ext: true,
            key_ops: ["sign"],
            kty: "EC",
            x: tlsPublicKeyJwk.x,
            y: tlsPublicKeyJwk.y,
        }, tlsCertAlg, true, ["sign"]),
        publicKey: tlsPublicKey,
    }
    const tlsCert = await x509.X509CertificateGenerator.createSelfSigned({
        serialNumber: "01",
        name: "CN=deno-proxy-multiplexer",
        notBefore: new Date("2000/01/01"),
        notAfter: new Date("2099/12/31"),
        signingAlgorithm: tlsCertAlg,
        keys: tlsKeypair,
        extensions: [
            new x509.BasicConstraintsExtension(false),

            // serverAuth
            new x509.ExtendedKeyUsageExtension(["1.3.6.1.5.5.7.3.1"], true),

            new x509.SubjectAlternativeNameExtension([{
                type: "dns",
                value: "deno-proxy-multiplexer",
            }], true),
        ]
    });
    const tlsCertPem = tlsCert.toString("pem");
    const tlsPrivateKeyPem = "-----BEGIN PRIVATE KEY-----\n" + splitToLines(encodeBase64(await crypto.subtle.exportKey("pkcs8", tlsKeypair.privateKey)), 64).join("\n") + "\n-----END PRIVATE KEY-----\n";
    multiplexerTls = { cert: tlsCertPem, key: tlsPrivateKeyPem };
}

const secrets = {
    sys: {
        proxyControllerSharedSecret: await deriveKey("sys:proxy-controller-shared-secret"),
        isolateSealingKey: await deriveKey("sys:isolate-sealing-key"),
        identityTokenSigningKey: await deriveKey("sys:identity-token-signing-key"),
        lscJwtSecret: await deriveKey("sys:lsc-jwt-secret"),
        controlPlaneClusterPrivateKey: await deriveKey("sys:control-plane-cluster-secret"),
        oidcEs256PrivateKey: await deriveKey("sys:oidc-es256-private-key"),
    },
    proxy: {
        svmcSecret: await deriveKey("proxy:svmc-secret"),
    },
    controller: {
        svmcSecret: await deriveKey("controller:svmc-secret"),
    },
    lscached: {
        svmcSecret: await deriveKey("lscached:svmc-secret"),
    },
    svmcd: {
        svmcSecret: await deriveKey("svmcd:svmc-secret"),
    },
};

const identities = {
    oidcEs256PublicKey: p256.keyFromPrivate(secrets.sys.oidcEs256PrivateKey).getPublic("hex"),
    svmcd: x25519PrivToPub(secrets.svmcd.svmcSecret),
    svmcPeers: {
        lscached: x25519PrivToPub(secrets.lscached.svmcSecret) + " lscached",
        controller: x25519PrivToPub(secrets.controller.svmcSecret) + " proxyctl",
        proxy: x25519PrivToPub(secrets.proxy.svmcSecret) + " proxyctl",
    }
};

console.log(`# Generated by tools/generate_credentials.ts`);
console.log(`# sha256(HKDF_SEED) == ${await crypto.subtle.digest("SHA-256", new TextEncoder().encode(hkdfSeed_)).then(encodeHex)}`);

console.log(gen("controller-credentials", {
    // A shared secret between `proxy` and `controller`. Proxies will include
    // this in `Authorization` header when making requests to the controller.
    PROXY_CONTROLLER_SHARED_SECRET: secrets.sys.proxyControllerSharedSecret,

    // An XChaCha20-Poly1305 key that encrypts and authenticates identity
    // tokens sent from controller to isolate-worker.
    ISOLATE_SEALING_KEY: secrets.sys.isolateSealingKey,

    // The (symmetric) JWT secret that signs isolate identity tokens.
    IDENTITY_TOKEN_SIGNING_KEY: secrets.sys.identityTokenSigningKey,

    // The (symmetric) JWT secret that signs lscache tokens.
    LSC_JWT_SECRET: secrets.sys.lscJwtSecret,

    // OIDC public key
    OIDC_ES256_PUBLIC_KEY: identities.oidcEs256PublicKey,

    // SVMC client private key. Different for every service.
    SVMC_SECRET: secrets.controller.svmcSecret,

    // SVMC server public key. Same across all services.
    SVMC_SERVER_PUBLIC_KEY: identities.svmcd,

    // TLS CA for authenticating the proxy-isolate link. Controller does not
    // make use of it, and just forwards it to isolate-workers.
    MULTIPLEXER_TLS_CA: multiplexerTls.cert,

    // x25519 private key that identifies the cluster to central control plane.
    CONTROL_PLANE_CLUSTER_PRIVATE_KEY: secrets.sys.controlPlaneClusterPrivateKey,
}));

console.log(gen("proxy-credentials", {
    PROXY_CONTROLLER_SHARED_SECRET: secrets.sys.proxyControllerSharedSecret,
    IDENTITY_TOKEN_SIGNING_KEY: secrets.sys.identityTokenSigningKey,
    OIDC_ES256_PRIVATE_KEY: secrets.sys.oidcEs256PrivateKey,
    OIDC_ES256_PUBLIC_KEY: identities.oidcEs256PublicKey,
    LSC_JWT_SECRET: secrets.sys.lscJwtSecret,

    SVMC_SECRET: secrets.proxy.svmcSecret,
    SVMC_SERVER_PUBLIC_KEY: identities.svmcd,

    // TLS private key and certificate for the proxy-multiplexer link. The
    // private key should only be exposed to proxy.
    MULTIPLEXER_TLS_PRIVATE_KEY: multiplexerTls.key,
    MULTIPLEXER_TLS_CERTIFICATE: multiplexerTls.cert,
}));

console.log(gen("netlify-origin-service-credentials", {
    IDENTITY_TOKEN_SIGNING_KEY: secrets.sys.identityTokenSigningKey,
    LSC_JWT_SECRET: secrets.sys.lscJwtSecret,
}));

console.log(gen("lscached-credentials", {
    LSC_JWT_SECRET: secrets.sys.lscJwtSecret,

    LSC_SVMC_SECRET: secrets.lscached.svmcSecret,
    LSC_SVMC_SERVER_PUBLIC_KEY: identities.svmcd,
}));

console.log(gen("svmcd-credentials", {
    SVMCD_STATIC_SECRET: secrets.svmcd.svmcSecret,

    // The name, public key, and allowed topics of all SVMC clients.
    ...Object.fromEntries(Object.entries(identities.svmcPeers).map(([name, peerInfo]) => [`PEER_${name}`, peerInfo])),
}));
