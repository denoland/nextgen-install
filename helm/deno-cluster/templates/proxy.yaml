# Copyright Deno Land Inc. All Rights Reserved. Proprietary and confidential.

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: proxy
  namespace: {{ .Release.Namespace }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: proxy
  minReplicas: {{ .Values.proxy.autoscaler.minReplicas | default 1 }}
  maxReplicas: {{ .Values.proxy.autoscaler.maxReplicas | default 10 }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 60

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: proxy
  namespace: {{ .Release.Namespace }}
  annotations:
    {{- range $k, $v := .Values.proxy.serviceaccount_annotations }}
    {{ $k }}: {{ $v }}
    {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: proxy
  name: proxy
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: proxy
  template:
    metadata:
      annotations: {}
      labels:
        app: proxy
    spec:
      affinity:
        {{- toYaml .Values.proxy.affinity | nindent 8 }}
      tolerations:
        {{- toYaml .Values.proxy.tolerations | nindent 8 }}
      priorityClassName: deno-system-high-priority
      containers:
        - image: {{ default "ghcr.io/denoland" .Values.docker_base_path }}/{{ default "cluster" .Values.docker_image_prefix }}-proxy:{{ default .Chart.AppVersion (.Values.proxy).version }}
          imagePullPolicy: IfNotPresent
          name: proxy
          ports:
            - containerPort: 8443
              name: runner
              protocol: TCP

          resources: {{ toYaml .Values.proxy.resources | nindent 12 }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          envFrom:
            - secretRef:
                name: proxy-credentials
          env:
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: K8S_NAMESPACE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OIDC_ISS
              value: http://controller.{{ .Release.Namespace }}.svc.cluster.local:4000
            - name: SVMC_ENDPOINT
              value: svmcd.{{ .Release.Namespace }}.svc.cluster.local:7293
            - name: CONTROLLER_ENDPOINT
              value: http://controller.{{ .Release.Namespace }}.svc.cluster.local:4000
            - name: CLUSTER_REGION
              value: {{ .Values.region }}
            - name: CLUSTER_HOSTNAME
              value: {{ .Values.hostname }}
            - name: CLUSTER_NAME
              value: {{ .Values.cluster_name }}
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "service.name=deno-proxy,service.namespace=deno_cluster"
            - name: PROXY_RESPONSE_CACHE_ENABLED
              value: "1"
            - name: PROXY_USE_PROXY_PROTOCOL
              value: {{ if .Values.proxy.use_proxy_protocol }}"1"{{ else }}"0"{{ end }}
            - name: AWS_REGION
              value: {{ .Values.region }}
            - name: MPTSYNC_SECRET
              valueFrom:
                secretKeyRef:
                  name: mptsync-shared-secret
                  key: secret
                  optional: true
            {{- if (.Values.mptsync).local_write }}
            - name: MPTSYNC_LOCAL_WRITE
              value: {{ .Values.mptsync.local_write }}
            {{- end }}
            {{- if .Values.blob.minio }}
            - name: S3_ENDPOINT
              value: http://minio.{{ .Release.Namespace }}.svc.cluster.local:9000
            - name: AWS_EC2_METADATA_DISABLED
              value: "true"
            - name: AWS_ACCESS_KEY_ID
              value: minioadmin
            - name: AWS_SECRET_ACCESS_KEY
              value: minioadmin
            - name: APPCONFIG_BUCKET
              value: {{ .Values.blob.minio.code_storage_bucket }}
            {{- else if .Values.blob.s3 }}
            - name: APPCONFIG_BUCKET
              value: {{ .Values.blob.s3.code_storage_bucket }}
            {{- end }}
            {{- range .Values.proxy.env }}
            - name: {{ .name }}
              {{- /* Must convert to yaml, indent and trim to support multiline strings in values */}}
              value: {{ .value | toYaml | indent 10 | trim }}
            {{- end }}
          volumeMounts:
            - name: subhoster-config
              mountPath: /app/subhoster-config
              readOnly: true
            {{- if eq .Values.provider "azure" }}
            # TODO(wperron) the conditional around cert volume should be more robust
            - name: public-tls-cert
              mountPath: /app/public-tls-cert
              readOnly: true
            {{- end }}
      volumes:
        - name: subhoster-config
          secret:
            secretName: subhoster-config
            optional: true
        {{- if eq .Values.provider "azure" }}
        - name: public-tls-cert
          secret:
            secretName: public-tls-cert
        {{- end }}
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Always
      serviceAccount: proxy
      terminationGracePeriodSeconds: 0
---
apiVersion: v1
kind: Service
metadata:
  annotations:
  name: proxy-internal
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: proxy
  type: ClusterIP
---
{{- if ne .Values.provider "aws" }}
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-dns-label-name: deno-cluster-proxy
  finalizers: []
  name: nlb-proxy
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - name: https-service-port
    port: {{ default 443 (.Values.proxy).https_service_port }}
    protocol: TCP
    targetPort: 8443
  {{- if (.Values.proxy).http_service_port }}
  - name: http-service-port
    port: {{ (.Values.proxy).http_service_port }}
    protocol: TCP
    targetPort: 8080
  {{- end }}
  - name: http-redirect-port
    port: {{ default 81 (.Values.proxy).http_redirect_port }}
    protocol: TCP
    targetPort: 8081
  selector:
    app: proxy
  type: LoadBalancer
{{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: proxy
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: proxy-binding
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: proxy
subjects:
  - kind: ServiceAccount
    name: proxy
    namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: auth
  namespace: {{ .Release.Namespace }}
data:
  allowBypass: {{ quote (default false ((default dict .Values.auth).allow_bypass)) }}
  accounts.yaml: | {{ .Values.auth.accounts | toYaml | nindent 4 }}
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: proxy
  namespace: {{ .Release.Namespace }}
spec:
  maxUnavailable: 0%
  selector:
    matchLabels:
      app: proxy
