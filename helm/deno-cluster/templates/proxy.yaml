# Copyright Deno Land Inc. All Rights Reserved. Proprietary and confidential.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: proxy
  namespace: {{ .Release.Namespace }}
  annotations:
    {{- range $k, $v := .Values.proxy.serviceaccount_annotations }}
    {{ $k }}: {{ $v }}
    {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: proxy
  name: proxy
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: proxy
  template:
    metadata:
      annotations: {}
      labels:
        app: proxy
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: karpenter.sh/provisioner-name
                    operator: DoesNotExist
              {{- if eq .Values.provider "aws" }}
              - matchExpressions:
                  - key: eks.amazonaws.com/nodegroup
                    operator: In
                    values:
                      - static
              {{- end }}
      priorityClassName: deno-system-high-priority
      containers:
        - image: {{ default "docker.io/denoland" .Values.docker_base_path }}/{{ default "cluster" .Values.docker_image_prefix }}-proxy:{{ default .Chart.AppVersion (.Values.proxy).version }}
          imagePullPolicy: IfNotPresent
          name: proxy
          ports:
            - containerPort: 8080
              name: runner
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          envFrom:
            - secretRef:
                name: proxy-credentials
          env:
            - name: OIDC_ISS
              value: http://controller.default.svc.cluster.local:4000
          volumeMounts:
            - name: subhoster-config
              mountPath: /app/subhoster-config
              readOnly: true
            {{- if eq .Values.provider "azure" }}
            # TODO(wperron) the conditional around cert volume should be more robust
            - name: public-tls-cert
              mountPath: /app/public-tls-cert
              readOnly: true
            {{- end }}
      volumes:
        - name: subhoster-config
          secret:
            secretName: subhoster-config
            optional: true
        {{- if eq .Values.provider "azure" }}
        - name: public-tls-cert
          secret:
            secretName: public-tls-cert
        {{- end }}
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Always
      serviceAccount: proxy
      terminationGracePeriodSeconds: 0
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    {{- if eq .Values.provider "azure" }}
    service.beta.kubernetes.io/azure-dns-label-name: deno-cluster-proxy
    {{- else if eq .Values.provider "aws" }}
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-type: external
    service.beta.kubernetes.io/aws-load-balancer-ip-address-type: dualstack
    service.beta.kubernetes.io/aws-load-balancer-subnets: {{ .Values.aws.subnet }}
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy: "ELBSecurityPolicy-TLS13-1-2-2021-06"
    service.beta.kubernetes.io/aws-load-balancer-name: {{ .Values.aws.nlb }}
    # replace the cert ARN after it has been created
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: {{ .Values.aws.certificate_arn }}
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-alpn-policy: "HTTP2Preferred"
    {{- end }}
  finalizers: []
  name: nlb-proxy
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - port: {{ default 443 (.Values.proxy).service_port }}
    protocol: TCP
    targetPort: 8080
  selector:
    app: proxy
  type: LoadBalancer
  {{- if eq .Values.provider "aws" }}
  loadBalancerClass: service.k8s.aws/nlb
  {{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: proxy
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: proxy-binding
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: proxy
subjects:
  - kind: ServiceAccount
    name: proxy
    namespace: {{ .Release.Namespace }}
