#!/bin/bash

set -eo pipefail

# Default values
source_dir="."
entry_point=""
deployment_domain=""
cluster_domain=""
subhoster="localdev"
s3_bucket=""
az_account=""
az_container=""

# Function to display usage
usage() {
  echo "Usage: $0 -d <domain> [options]"
  echo "Options:"
  echo "  -d, --domain             Deployment domain (e.g., hello.mycluster.deno-cluster.net)"
  echo "  -s, --source-dir         Source directory (default: current directory)"
  echo "  -e, --entry-point        Specify entry point (default: auto detect)"
  echo "  --s3-bucket              Specify S3 bucket (required if using AWS)"
  echo "  --az-storage-account     Azure storage account (required if using Azure)"
  exit 1
}

# Parse arguments
while [[ "$#" -gt 0 ]]; do
  case "$1" in
  -d | --domain)
    deployment_domain="$2"
    shift
    ;;
  -s | --source-dir)
    source_dir="$2"
    shift
    ;;
  -e | --entry-point | --entrypoint)
    entry_point="$2"
    shift
    ;;
  --s3-bucket)
    s3_bucket="$2"
    shift
    ;;
  --az-storage-account)
    az_account="$2"
    shift
    ;;
  *) usage ;;
  esac
  shift
done

# Validate required parameters
if [ -z "$deployment_domain" ]; then
  usage
fi

if [ -z "$s3_bucket" ] && [ -z "$az_account" ]; then
  echo "Either --s3-bucket or --az-storage-account must be provided."
  exit 1
fi

# Extract root domain by stripping the first label from the deployment domain
cluster_domain=$(echo "$deployment_domain" | sed -e 's/^[^.]*\.//')

# Prepare temp directory
tempdir="$(mktemp -d -t star-shaped-hole-deploy)"
trap 'rm -rf -- "$tempdir"' EXIT

mkdir "$tempdir/pkg"
mkdir "$tempdir/pkg/deno_dir"
mkdir "$tempdir/pkg/src"

# Copy source code to tempdir
(cd "$source_dir" && tar --exclude='.git' -cf - .) |
  (cd "$tempdir/pkg/src" && tar -xf -)
cd "$tempdir/pkg/src"

# Detect entry point if not specified
if [ -z "$entry_point" ]; then
  for e in main.ts main.js index.ts index.js mod.ts mod.js node_modules/.bin/next; do
    if [ -f "$e" ]; then
      entry_point="$e"
      break
    fi
  done
fi

if [ -z "$entry_point" ]; then
  echo "Error: could not determine entry point."
  exit 1
else
  echo "  entry point: $entry_point"
fi

# Determine if the entry point is Next.js and set args accordingly
if [[ "$entry_point" == *"node_modules/.bin/next"* ]]; then
  echo '{"entrypoint": "'$entry_point'", "args": ["start"]}' >"$tempdir/pkg/config.json"
else
  echo '{"entrypoint": "'$entry_point'", "args": []}' >"$tempdir/pkg/config.json"
fi

echo "Building package..."
DENO_DIR="$tempdir/pkg/deno_dir" DENO_FUTURE=1 deno cache "$tempdir/pkg/src/$entry_point"
cd ..
tar c . >../pkg.tar
cd ..

# Upload package to the appropriate cloud provider
echo "Uploading package..."
code_path="code/pkg-$(date -u +'%s')-$(uuidgen).tar"
if [ -n "$s3_bucket" ]; then
  code_url="s3://$s3_bucket/$code_path"
  aws s3 cp pkg.tar "$code_url"
elif [ -n "$az_account" ]; then
  code_url="s3://deployments/$code_path"
  az storage blob upload -o none --only-show-errors -f pkg.tar --account-name "$az_account" -c "deployments" -n "$code_path"
fi

# Construct layered code URL
layers="$(echo "$code_url" | base64 | tr -d '\n\r')"
if [ ! -z "$LAYERS_PREFIX" ]; then layers="$LAYERS_PREFIX,$layers"; fi
if [ ! -z "$LAYERS_SUFFIX" ]; then layers="$layers,$LAYERS_SUFFIX"; fi
layered_code_url="layers://$layers"

# Make a HTTP request to the cluster to trigger deployment.
echo "Optimizing deployment..."
curl --silent -f -o /dev/null \
  --request-target "https://$deployment_domain/" \
  --header "x-deno-deployment-id: $subhoster/$layered_code_url" \
  "https://$cluster_domain"

# Update hostmap
echo "Updating hostmap..."
if [ -n "$s3_bucket" ]; then
  echo "$layered_code_url" |
    aws s3 cp - "s3://$s3_bucket/hostmap/$deployment_domain"
elif [ -n "$az_account" ]; then
  echo "$layered_code_url" |
    az storage blob upload -o none --only-show-errors --overwrite --data @- --account-name "$az_account" -c "deployments" -n "hostmap/$deployment_domain"
fi

echo "Deployed to https://$deployment_domain"
