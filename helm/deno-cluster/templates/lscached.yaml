# Copyright Deno Land Inc. All Rights Reserved. Proprietary and confidential.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: lscached
  namespace: {{ .Release.Namespace }}
  annotations:
    {{- range $k, $v := .Values.lscached.serviceaccount_annotations }}
    {{ $k }}: {{ $v }}
    {{- end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: lscached-serve
  namespace: {{ .Release.Namespace }}
spec:
  minReadySeconds: 10
  replicas: 1
  selector:
    matchLabels:
      app: lscached-serve
  serviceName: lscached-serve
  template:
    metadata:
      labels:
        app: lscached-serve
    spec:
      serviceAccountName: lscached
      affinity:
        {{- toYaml .Values.lscached.affinity | nindent 8 }}
      tolerations:
        {{- toYaml .Values.lscached.tolerations | nindent 8 }}
      containers:
      - args:
        - /lscached
        - serve
        - --addr=[::]:4522
        - --internal-addr=[::]:4523
        - --svmc-local-addr=[::]:0
        {{- if not (eq .Values.provider "aws") }}
        - --s3-force-path-style
        {{- end }}
        envFrom:
        - secretRef:
            name: lscached-credentials
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: RUST_LOG
          value: info
        - name: AWS_REGION
          value: {{ .Values.region }}
        - name: TMPDIR
          value: /cache
        - name: LSC_CACHE_DIRECTORY
          value: /cache
        - name: LSC_NUM_BDSRV
          value: "2"
        - name: LSC_NUM_WRSRV
          value: "1"
        - name: LSC_SVMC_ENDPOINT
          value: svmcd.{{ .Release.Namespace }}.svc.cluster.local:7293
        - name: LSC_SVMC_GROUP
          value: lscached
        {{- if or (eq .Values.provider "azure") (eq .Values.provider "minikube") }}
        - name: LSC_S3_ENDPOINT
          value: http://minio.{{ .Release.Namespace }}.svc.cluster.local:9000
        - name: LSC_S3_BUCKET
          value: {{ .Values.blob.minio.cache_storage_bucket }}
        - name: AWS_EC2_METADATA_DISABLED
          value: "true"
        - name: AWS_ACCESS_KEY_ID
          value: minioadmin
        - name: AWS_SECRET_ACCESS_KEY
          value: minioadmin
        {{- else if eq .Values.provider "aws" }}
        - name: LSC_S3_BUCKET
          value: {{ .Values.blob.s3.cache_storage_bucket }}
        {{- end }}
        - name: LSC_S3_PREFIX
          value: default/
        - name: LSC_WRITE_BUFFER_SIZE_BYTES
          value: "536870912"
{{- if ne .Values.provider "aws" }}
        - name: LSC_DISK_CACHE_EVICTION_TRIGGER_THRESHOLD_BYTES
          value: "2147483648" # 2GB
{{- else }}
        - name: LSC_DISK_CACHE_EVICTION_TRIGGER_THRESHOLD_BYTES
          value: "21474836480" # 20GB
{{- end }}
        image: {{ default "ghcr.io/denoland" .Values.docker_base_path }}/{{ default "cluster" .Values.docker_image_prefix }}-lscached:{{ default .Chart.AppVersion (.Values.lscached).version }}
        imagePullPolicy: IfNotPresent
        name: lscached-serve
        ports:
        - containerPort: 4522
          name: external
          protocol: TCP
        - containerPort: 4523
          name: internal
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /cache
          name: cache
{{- if ne .Values.provider "aws" }}
          subPathExpr: $(POD_NAME)
{{- end }}
      priorityClassName: deno-system-high-priority
      terminationGracePeriodSeconds: 10
{{- if ne .Values.provider "aws" }}
      volumes:
      - hostPath:
          path: /mnt/lscache-{{ .Release.Namespace }}
          type: DirectoryOrCreate
        name: cache
{{- else }}
  volumeClaimTemplates:
  - metadata:
      name: cache
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "ebs-sc"
      resources:
        requests:
          storage: 100Gi
{{- end }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: lscached-dwb
  namespace: {{ .Release.Namespace }}
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      name: lscached-dwb
    spec:
      activeDeadlineSeconds: 299
      template:
        metadata:
          name: lscached-dwb
        spec:
          serviceAccountName: lscached
          containers:
          - args:
            - /lscached
            - dispatch-write-buffers
            {{- if not (eq .Values.provider "aws") }}
            - --s3-force-path-style
            {{- end }}
            env:
            - name: RUST_LOG
              value: info
            - name: AWS_REGION
              value: {{ .Values.region }}
            {{- if or (eq .Values.provider "azure") (eq .Values.provider "minikube") }}
            - name: LSC_S3_ENDPOINT
              value: http://minio.{{ .Release.Namespace }}.svc.cluster.local:9000
            - name: LSC_S3_BUCKET
              value: {{ .Values.blob.minio.cache_storage_bucket }}
            - name: AWS_EC2_METADATA_DISABLED
              value: "true"
            - name: AWS_ACCESS_KEY_ID
              value: minioadmin
            - name: AWS_SECRET_ACCESS_KEY
              value: minioadmin
            {{- else if eq .Values.provider "aws" }}
            - name: LSC_S3_BUCKET
              value: {{ .Values.blob.s3.cache_storage_bucket }}
            {{- end }}
            - name: LSC_S3_PREFIX
              value: default/
            image: {{ default "ghcr.io/denoland" .Values.docker_base_path }}/{{ default "cluster" .Values.docker_image_prefix }}-lscached:{{ default .Chart.AppVersion (.Values.lscached).version }}
            imagePullPolicy: IfNotPresent
            name: lscached-dwb
          restartPolicy: Never
  schedule: '*/5 * * * *'
  startingDeadlineSeconds: 30
  successfulJobsHistoryLimit: 3
  suspend: false
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: lscached-gc
  namespace: {{ .Release.Namespace }}
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      name: lscached-gc
    spec:
      activeDeadlineSeconds: 299
      template:
        metadata:
          name: lscached-gc
        spec:
          serviceAccountName: lscached
          containers:
          - args:
            - /lscached
            - gc
            {{- if not (eq .Values.provider "aws") }}
            - --s3-force-path-style
            {{- end }}
            env:
            - name: RUST_LOG
              value: info
            - name: AWS_REGION
              value: {{ .Values.region }}
            {{- if or (eq .Values.provider "azure") (eq .Values.provider "minikube") }}
            - name: LSC_S3_ENDPOINT
              value: http://minio.{{ .Release.Namespace }}.svc.cluster.local:9000
            - name: LSC_S3_BUCKET
              value: {{ .Values.blob.minio.cache_storage_bucket }}
            - name: AWS_EC2_METADATA_DISABLED
              value: "true"
            - name: AWS_ACCESS_KEY_ID
              value: minioadmin
            - name: AWS_SECRET_ACCESS_KEY
              value: minioadmin
            {{- else if eq .Values.provider "aws" }}
            - name: LSC_S3_BUCKET
              value: {{ .Values.blob.s3.cache_storage_bucket }}
            {{- end }}
            - name: LSC_S3_PREFIX
              value: default/
            image: {{ default "ghcr.io/denoland" .Values.docker_base_path }}/{{ default "cluster" .Values.docker_image_prefix }}-lscached:{{ default .Chart.AppVersion (.Values.lscached).version }}
            imagePullPolicy: IfNotPresent
            name: lscached-gc
          restartPolicy: Never
  schedule: '*/5 * * * *'
  startingDeadlineSeconds: 30
  successfulJobsHistoryLimit: 3
  suspend: false
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: lscached-merge
  namespace: {{ .Release.Namespace }}
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      name: lscached-merge
    spec:
      activeDeadlineSeconds: 3599
      template:
        metadata:
          name: lscached-merge
        spec:
          serviceAccountName: lscached
          containers:
          - args:
            - /lscached
            - merge
            {{- if not (eq .Values.provider "aws") }}
            - --s3-force-path-style
            {{- end }}
            env:
            - name: RUST_LOG
              value: info
            - name: AWS_REGION
              value: {{ .Values.region }}
            {{- if or (eq .Values.provider "azure") (eq .Values.provider "minikube") }}
            - name: LSC_S3_ENDPOINT
              value: http://minio.{{ .Release.Namespace }}.svc.cluster.local:9000
            - name: LSC_S3_BUCKET
              value: {{ .Values.blob.minio.cache_storage_bucket }}
            - name: AWS_EC2_METADATA_DISABLED
              value: "true"
            - name: AWS_ACCESS_KEY_ID
              value: minioadmin
            - name: AWS_SECRET_ACCESS_KEY
              value: minioadmin
            {{- else if eq .Values.provider "aws" }}
            - name: LSC_S3_BUCKET
              value: {{ .Values.blob.s3.cache_storage_bucket }}
            {{- end }}
            - name: LSC_S3_PREFIX
              value: default/
            - name: LSC_MAX_GROUP_SIZE
              value: "8589934592"
            image: {{ default "ghcr.io/denoland" .Values.docker_base_path }}/{{ default "cluster" .Values.docker_image_prefix }}-lscached:{{ default .Chart.AppVersion (.Values.lscached).version }}
            imagePullPolicy: IfNotPresent
            name: lscached-merge
          restartPolicy: Never
  schedule: '*/5 * * * *'
  startingDeadlineSeconds: 30
  successfulJobsHistoryLimit: 3
  suspend: false
---
apiVersion: v1
kind: Service
metadata:
  annotations:
  name: lscached-serve
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - port: 4522
      protocol: TCP
      targetPort: 4522
  selector:
    app: lscached-serve
  type: ClusterIP
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: lscached
  namespace: {{ .Release.Namespace }}
spec:
  maxUnavailable: 0%
  selector:
    matchLabels:
      app: lscached-serve
