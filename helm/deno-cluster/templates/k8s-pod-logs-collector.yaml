apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: k8s-pod-logs
  namespace: {{ .Release.Namespace }}
spec:
  config:
    exporters:
      otlp:
        endpoint: http://main-collector.{{ .Release.Namespace }}.svc.cluster.local:4317
        tls:
          insecure: true
    extensions:
      health_check: {}
      zpages: {}
    processors:
      batch: {}
    receivers:
      filelog:
        exclude:
        - /var/log/pods/*/otc-container/*.log
        include:
        - /var/log/pods/{{ .Release.Namespace }}*/*/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - id: get-format
          routes:
          - expr: body matches "^\\{"
            output: parser-docker
          - expr: body matches "^[^ Z]+ "
            output: parser-crio
          - expr: body matches "^[^ Z]+Z"
            output: parser-containerd
          type: router
        - id: parser-crio
          output: extract_metadata_from_filepath
          regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          timestamp:
            layout: 2006-01-02T15:04:05.999999999Z07:00
            layout_type: gotime
            parse_from: attributes.time
          type: regex_parser
        - id: parser-containerd
          output: extract_metadata_from_filepath
          regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.time
          type: regex_parser
        - id: parser-docker
          output: extract_metadata_from_filepath
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.time
          type: json_parser
        - from: attributes.log
          to: body
          type: move
        - cache:
            size: 128
          id: extract_metadata_from_filepath
          on_error: drop_quiet
          parse_from: attributes["log.file.path"]
          regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          type: regex_parser
        - from: attributes.stream
          to: attributes["log.iostream"]
          type: move
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.restart_count
          to: resource["k8s.container.restart_count"]
          type: move
        - from: attributes.uid
          to: resource["k8s.pod.uid"]
          type: move
        start_at: beginning
    service:
      extensions:
      - health_check
      - zpages
      pipelines:
        logs:
          exporters:
          - otlp
          processors:
          - batch
          receivers:
          - filelog
  image: otel/opentelemetry-collector-contrib:0.105.0
  mode: daemonset
  ports:
  - name: metrics
    port: 8888
  - name: healthcheck
    port: 13133
  - name: zpages
    port: 55679
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 512Mi
  tolerations:
  - effect: NoSchedule
    key: isolate-worker
    operator: Exists
  volumeMounts:
  - mountPath: /var/log/pods
    name: varlogpods
    readOnly: true
  - mountPath: /var/lib/docker/containers
    name: varlibdockercontainers
    readOnly: true
  volumes:
  - hostPath:
      path: /var/log/pods
    name: varlogpods
  - hostPath:
      path: /var/lib/docker/containers
    name: varlibdockercontainers
