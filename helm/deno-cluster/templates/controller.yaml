# Copyright Deno Land Inc. All Rights Reserved. Proprietary and confidential.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: controller
  namespace: {{ .Release.Namespace }}
  annotations:
    {{- range $k, $v := .Values.controller.serviceaccount_annotations }}
    {{ $k }}: {{ $v }}
    {{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations: {}
  name: controller
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - pods/eviction
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - get
      - list
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: controller-binding
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: controller
subjects:
  - kind: ServiceAccount
    name: controller
    namespace: {{ .Release.Namespace }}

{{ if .Values.clusterRBAC.enabled }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: deno-metrics
rules:
  - apiGroups:
     - "metrics.k8s.io"
    resources:
      - nodes
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - list
      - get
      - watch
      - patch
  - apiGroups:
      - ""
    resources:
      - nodes/metrics
      - nodes/stats
    verbs:
      - get
  - nonResourceURLs:
      - /metrics
      - /metrics/cadvisor
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations: {}
  name: deno-metrics-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: deno-metrics
subjects:
  - kind: ServiceAccount
    name: controller
    namespace: {{ .Release.Namespace }}
{{ end }}
---
{{- range $index, $pool := .Values.isolate_pools }}
apiVersion: v1
data: {}
kind: ConfigMap
metadata:
  name: controller-auto-scaler-state-{{ $pool.name }}
  namespace: {{ $.Release.Namespace }}
---
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: controller-cluster-info
  namespace: {{ .Release.Namespace }}
data:
  "api_endpoint": "https://api.{{ .Values.hostname }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: primary-controller-lock
  namespace: {{ .Release.Namespace }}
  labels:
    app: primary-controller-lock
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: controller
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: controller
        version: "{{ default .Chart.AppVersion (.Values.controller).version }}"
    spec:
      affinity:
{{ if not (eq .Values.provider "minikube") }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - controller
                - key: version
                  operator: In
                  values:
                  - "{{ default .Chart.AppVersion (.Values.controller).version }}"
              topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: deno.com/workloads
                operator: In
                values:
                - stable
{{ end }}
      tolerations:
        - key: deno.com/workloads
          operator: Equal
          value: nextgen
          effect: NoSchedule
      containers:
      - envFrom:
        - secretRef:
            name: controller-credentials
        env:
        - name: ISOLATE_WORKER_CONTAINER_IMAGE
          value: {{ default "ghcr.io/denoland" .Values.docker_base_path }}/{{ default "cluster" .Values.docker_image_prefix }}-isolate-worker:{{ default .Chart.AppVersion (.Values.controller).isolate_worker_version }}
        - name: ISOLATE_POOLS_CONFIGMAP
          value: isolate-pools-config
        - name: CONTROLLER_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: CONTROLLER_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: K8S_NAMESPACE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SVMC_ENDPOINT
          value: svmcd.{{ .Release.Namespace }}.svc.cluster.local:7293
        - name: LSC_ENDPOINT
          value: http://lscached-serve.{{ .Release.Namespace }}.svc.cluster.local:4522
        - name: OIDC_ISS
          value: http://controller.{{ .Release.Namespace }}.svc.cluster.local:4000
        - name: KUBELET_TLS_CA
          valueFrom:
            configMapKeyRef:
              name: kube-root-ca.crt
              key: ca.crt
        - name: AWS_REGION
          value: {{ .Values.region }}
        - name: CLUSTER_PROVIDER
          value: {{ .Values.provider }}
        - name: CLUSTER_REGION
          value: {{ .Values.region }}
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=deno-controller,service.namespace=deno_cluster"
        {{- if eq .Values.provider "minikube" }}
        - name: NO_DNSMASQ
          value: "1"
        {{- end }}
        {{- if .Values.enable_firecracker }}
        - name: USE_FIRECRACKER
          value: "1"
        {{- end }}
        {{- if (.Values.mptsync).enable }}
        - name: MPTSYNC_CONFIG
          value: {{ .Values.mptsync.config | toJson | quote }}
        {{- end }}
        {{- if .Values.blob.minio }}
        - name: S3_ENDPOINT
          value: http://minio.{{ .Release.Namespace }}.svc.cluster.local:9000
        - name: AWS_EC2_METADATA_DISABLED
          value: "true"
        - name: AWS_ACCESS_KEY_ID
          value: minioadmin
        - name: AWS_SECRET_ACCESS_KEY
          value: minioadmin
        - name: APPCONFIG_BUCKET
          value: {{ .Values.blob.minio.code_storage_bucket }}
        {{- else if .Values.blob.s3 }}
        - name: APPCONFIG_BUCKET
          value: {{ .Values.blob.s3.code_storage_bucket }}
        {{- end }}
        {{- range .Values.controller.env }}
        - name: {{ .name }}
          {{- /* Must convert to yaml, indent and trim to support multiline strings in values */}}
          value: {{ .value | toYaml | indent 10 | trim }}
        {{- end }}
        image: {{ default "ghcr.io/denoland" .Values.docker_base_path }}/{{ default "cluster" .Values.docker_image_prefix }}-controller:{{ default .Chart.AppVersion (.Values.controller).version }}
        imagePullPolicy: IfNotPresent
        name: controller
        ports:
        - containerPort: 4000
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      priorityClassName: deno-system-critical
      serviceAccount: controller
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  annotations:
  name: controller
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - port: 4000
      protocol: TCP
      targetPort: 4000
  selector:
    app: controller
  type: ClusterIP
